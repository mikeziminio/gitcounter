version: "3.8"

x-python-service:
    &python-service
    build:
        context: ./setup/python-service
        args:
            - PROJECT_PATH=$PROJECT_PATH
    volumes:
        - shared_venv:$PROJECT_PATH/.venv
        - ./src:$PROJECT_PATH/src
        - ./pyproject.toml:$PROJECT_PATH/pyproject.toml
        - ./.env:$PROJECT_PATH/.env
        - ./setup/python-service/alembic.ini:$PROJECT_PATH/setup/python-service/alembic.ini
        - ./setup/tools:$PROJECT_PATH/setup/tools
        - ./data/celery-beat:$PROJECT_PATH/data/celery-beat
    restart: always
    working_dir: $PROJECT_PATH
    env_file: .env


services:

    cli:
        <<: *python-service
        tty: true
        build:
            context: ./setup/cli
            args:
                - PROJECT_PATH=$PROJECT_PATH
        command:
            - /bin/bash
            - -c
            - sleep infinity

    env-up:
        <<: *python-service
        restart: no
        hostname: $ENV_UP_HOST
        depends_on:
            - postgres
            - rabbitmq
        command:
            - /bin/bash
            - -c
            - |
                source ./.venv/bin/activate &&
                poetry install --no-root &&
                cd src &&
                alembic upgrade head &&
                nc -k -l -p $ENV_UP_CONTAINER_PORT
            # netcat keep (-k) listen (-l) port (-p)

    dashboard-uvicorn:
        <<: *python-service
        depends_on:
            - env-up
        hostname: $DASHBOARD_HOST
        ports:
            - ${DASHBOARD_PORT}:${DASHBOARD_CONTAINER_PORT}
        command:
            - /bin/bash
            - -c
            - |
                source ./.venv/bin/activate &&
                source ./setup/tools/wait-for-socket.sh "$ENV_UP_HOST" "$ENV_UP_CONTAINER_PORT" &&
                source ./setup/tools/wait-for-socket.sh "$POSTGRES_HOST" "$POSTGRES_CONTAINER_PORT" &&
                source ./setup/tools/wait-for-command.sh uvicorn &&
                cd src &&
                uvicorn main:app --host 0.0.0.0 --port $DASHBOARD_CONTAINER_PORT

    celery-beat:
        << : *python-service
        depends_on:
            - env-up
            - celery-worker
        command:
            - /bin/bash
            - -c
            - |
                source ./.venv/bin/activate &&
                source ./setup/tools/wait-for-socket.sh "$ENV_UP_HOST" "$ENV_UP_CONTAINER_PORT" &&
                source ./setup/tools/wait-for-socket.sh "$POSTGRES_HOST" "$POSTGRES_CONTAINER_PORT" &&
                source ./setup/tools/wait-for-socket.sh "$RABBITMQ_HOST" "$RABBITMQ_CONTAINER_PORT" &&
                source ./setup/tools/wait-for-command.sh celery &&
                cd src &&
                celery -A tasks beat --schedule $PROJECT_PATH/data/celery-beat/celerybeat-schedule.db

    celery-worker:
        << : *python-service
        depends_on:
            - env-up
        command:
            - /bin/bash
            - -c
            - |
                source ./.venv/bin/activate &&
                source ./setup/tools/wait-for-socket.sh "$ENV_UP_HOST" "$ENV_UP_CONTAINER_PORT" &&
                source ./setup/tools/wait-for-socket.sh "$POSTGRES_HOST" "$POSTGRES_CONTAINER_PORT" &&
                source ./setup/tools/wait-for-socket.sh "$RABBITMQ_HOST" "$RABBITMQ_CONTAINER_PORT" &&
                source ./setup/tools/wait-for-command.sh celery &&
                cd src &&
                celery -A tasks worker -O fair

    rabbitmq:
        image: rabbitmq:3.12.9-alpine
        restart: always
        hostname: $RABBITMQ_HOST
        ports:
            - ${RABBITMQ_PORT}:${RABBITMQ_CONTAINER_PORT}
        volumes:
            - ./data/rabbitmq:/var/lib/rabbitmq
            - ./setup/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
        env_file: .env

    postgres:
        image: postgres:16.1-alpine3.18
        restart: always
        hostname: $POSTGRES_HOST
        ports:
            - ${POSTGRES_PORT}:${POSTGRES_CONTAINER_PORT}
        volumes:
            - ./data/postgres:/var/lib/postgresql/data
            - ./setup/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
            - ./setup/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
        env_file: .env

volumes:
    shared_venv:

